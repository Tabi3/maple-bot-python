from Maple_bot_functions.ExternalLibraries import *

def bot_help(func):
    def wrapper(*args):
        scope, embed = {i:"" for i in ["message", "description"]}, nextcord.Embed(
            title =  'Command Modules', color =  0xAAF0D1, description = f'use command `{args[0].context.prefix}'
                     'help <module/command>` for more info on the command/module' 
        )
        [scope.update(message     = f'{scope["message"]}`{cog.qualified_name}`\n', 
                      description = f'{scope["description"]}{cog.__doc__}\n',
                      _ = ()) for cog in args[1] if not isinstance(cog, type(None)) and args[1][cog]]
        [embed.add_field(name = i[0], value = i[1], inline=True) for i in [["Assigned Modules", scope["message"]], 
                                                            ["Module Description", scope["description"]]] if i[1]]
        return func(args[0], args[1], embed)
    return wrapper

def cog_help(func):
    def wrapper(self, cog):
        prefix = self.context.prefix
        message, message_content, description = (f'{cog.qualified_name} Module Commands',
                                    "".join(f'`{prefix}{command.name}`\n'
                                            for command in cog.get_commands()
            ), "".join(f'{command.help}\n' for command in cog.get_commands())
        )
        embed = nextcord.Embed(title         = message,  
                               color         = 0xAAF0D1
        ).add_field(name = "Commands", value = message_content)\
         .add_field(name = "Description", value= description)
        return func(self, cog, embed)
    return wrapper

def command_help(func):
    def wrapper(self, command):
        prefix = self.context.prefix
        message, aliases = f'{prefix}{command.name} '+''.join([f'<{param}> ' for param in list(command.params)[2:]]
        ), ", ".join(f'`{i}`' for i in command.aliases)
        embed = nextcord.Embed(title         = f'{command.name} command syntax',
                               description   = f'`{message}`' + (f'\nalso known as {aliases}' if bool(command.aliases) else ''),
                               color         = 0xAAF0D1
        )
        return func(self, command, embed)
    return wrapper