from Maple_bot_functions.ExternalLibraries import *

class Maple_help(commands.HelpCommand):
    def __init__(self):
        super().__init__()

    async def send_bot_help(self, mapping):
        current_scope, embed = {i:"" for i in ["message", "description"]}, nextcord.Embed(
            title       =  'Command Modules',
            description = f'use command `{self.context.prefix}help <module/command>` for more info on the command/module',
            color       =  0xAAF0D1
        )
        [current_scope.update(message     = f'{current_scope["message"]}`{cog.qualified_name}`\n', 
                              description = f'{current_scope["description"]}{cog.__doc__}\n',
                              _ = ()) for cog in mapping if not isinstance(cog, type(None)) and mapping[cog]]
        [embed.add_field(name = i[0], value = i[1], inline=True) for i in [["Assigned Modules", current_scope["message"]], 
                                                            ["Module Description", current_scope["description"]]] if i[1]]
        await self.get_destination().send(embed = embed)

    async def send_cog_help(self, cog):
        prefix = self.context.prefix
        message, message_content, description = (f'{cog.qualified_name} Module Commands',
                                    "".join(f'`{prefix}{command.name}`\n'
                                            for command in cog.get_commands()
            ), "".join(f'{command.help}\n' for command in cog.get_commands())
        )
        embed = nextcord.Embed(title         = message,  
                               color         = 0xAAF0D1
        ).add_field(name = "Commands", value = message_content)\
         .add_field(name = "Description", value= description)

        await self.get_destination().send(embed = embed)

    async def send_group_help(self, group):
        await self.get_destination().send(
            f'{group.name}: ', {[command.name for command in group.commands]}
        )

    async def send_command_help(self, command):
        prefix = self.context.prefix
        message, aliases = f'{prefix}{command.name} '+''.join([f'<{param}> ' for param in list(command.params)[2:]]
        ), ", ".join(f'`{i}`' for i in command.aliases)
        embed = nextcord.Embed(title         = f'{command.name} command syntax',
                               description   = f'`{message}`' + (f'\nalso known as {aliases}' if bool(command.aliases) else ''),
                               color         = 0xAAF0D1
        )
        await self.get_destination().send(embed=embed)